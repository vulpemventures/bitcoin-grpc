// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bitcoin.proto

package bitcoin

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Request struct {
	Blob                 string   `protobuf:"bytes,1,opt,name=blob,proto3" json:"blob,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_37b52c296c51ea52, []int{0}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetBlob() string {
	if m != nil {
		return m.Blob
	}
	return ""
}

type Reply struct {
	Blob                 string   `protobuf:"bytes,1,opt,name=blob,proto3" json:"blob,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Reply) Reset()         { *m = Reply{} }
func (m *Reply) String() string { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()    {}
func (*Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_37b52c296c51ea52, []int{1}
}

func (m *Reply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Reply.Unmarshal(m, b)
}
func (m *Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Reply.Marshal(b, m, deterministic)
}
func (m *Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reply.Merge(m, src)
}
func (m *Reply) XXX_Size() int {
	return xxx_messageInfo_Reply.Size(m)
}
func (m *Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_Reply proto.InternalMessageInfo

func (m *Reply) GetBlob() string {
	if m != nil {
		return m.Blob
	}
	return ""
}

func init() {
	proto.RegisterType((*Request)(nil), "bitcoin.Request")
	proto.RegisterType((*Reply)(nil), "bitcoin.Reply")
}

func init() { proto.RegisterFile("bitcoin.proto", fileDescriptor_37b52c296c51ea52) }

var fileDescriptor_37b52c296c51ea52 = []byte{
	// 129 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0xca, 0x2c, 0x49,
	0xce, 0xcf, 0xcc, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0x64, 0xb9,
	0xd8, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x84, 0xb8, 0x58, 0x92, 0x72, 0xf2, 0x93,
	0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x25, 0x69, 0x2e, 0xd6, 0xa0, 0xd4, 0x82,
	0x9c, 0x4a, 0x6c, 0x92, 0x46, 0x0e, 0x5c, 0xec, 0x4e, 0x10, 0x63, 0x84, 0x4c, 0xb9, 0x04, 0xdd,
	0x53, 0x4b, 0x9c, 0x72, 0xf2, 0x93, 0xb3, 0x93, 0x33, 0x12, 0x33, 0xf3, 0x3c, 0xf3, 0xd2, 0xf2,
	0x85, 0x04, 0xf4, 0x60, 0x96, 0x42, 0xad, 0x90, 0xe2, 0x43, 0x12, 0x29, 0xc8, 0xa9, 0x4c, 0x62,
	0x03, 0xbb, 0xc6, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x5f, 0xd7, 0xae, 0xde, 0x9e, 0x00, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BitcoinClient is the client API for Bitcoin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BitcoinClient interface {
	// A simple RPC.
	GetBlockchainInfo(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
}

type bitcoinClient struct {
	cc *grpc.ClientConn
}

func NewBitcoinClient(cc *grpc.ClientConn) BitcoinClient {
	return &bitcoinClient{cc}
}

func (c *bitcoinClient) GetBlockchainInfo(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/bitcoin.Bitcoin/GetBlockchainInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BitcoinServer is the server API for Bitcoin service.
type BitcoinServer interface {
	// A simple RPC.
	GetBlockchainInfo(context.Context, *Request) (*Reply, error)
}

func RegisterBitcoinServer(s *grpc.Server, srv BitcoinServer) {
	s.RegisterService(&_Bitcoin_serviceDesc, srv)
}

func _Bitcoin_GetBlockchainInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BitcoinServer).GetBlockchainInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bitcoin.Bitcoin/GetBlockchainInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BitcoinServer).GetBlockchainInfo(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Bitcoin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bitcoin.Bitcoin",
	HandlerType: (*BitcoinServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlockchainInfo",
			Handler:    _Bitcoin_GetBlockchainInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bitcoin.proto",
}
